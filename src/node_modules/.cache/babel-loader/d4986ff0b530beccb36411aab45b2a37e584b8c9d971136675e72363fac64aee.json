{"ast":null,"code":"var _jsxFileName = \"/home/noxirongky/code/stima/tucil2/src/src/components/Input.tsx\";\nimport React from \"react\";\n\n// Define the type for the points and the setter function if using TypeScript\n// If you're not using TypeScript, you can remove these type definitions.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Modify the InputTable to accept `setPoints` as a prop\nconst InputTable = ({\n  points,\n  setPoints,\n  show\n}) => {\n  // Handler for input changes\n  const handlePointChange = (index, coord, value) => {\n    const updatedPoints = [...points];\n    updatedPoints[index][coord] = parseFloat(value);\n    setShow(false);\n    setPoints(updatedPoints);\n  };\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 11\n        }, this), points.map((_, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n          children: `Point ${index}`\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: \"X\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this), points.map((point, index) => /*#__PURE__*/_jsxDEV(\"td\", {\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            value: point.x,\n            onChange: e => handlePointChange(index, \"x\", e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 15\n          }, this)\n        }, `x-${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: \"Y\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this), points.map((point, index) => /*#__PURE__*/_jsxDEV(\"td\", {\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            value: point.y,\n            onChange: e => handlePointChange(index, \"y\", e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 15\n          }, this)\n        }, `y-${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n_c = InputTable;\nexport default InputTable;\nvar _c;\n$RefreshReg$(_c, \"InputTable\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","InputTable","points","setPoints","show","handlePointChange","index","coord","value","updatedPoints","parseFloat","setShow","children","fileName","_jsxFileName","lineNumber","columnNumber","map","_","point","type","x","onChange","e","target","y","_c","$RefreshReg$"],"sources":["/home/noxirongky/code/stima/tucil2/src/src/components/Input.tsx"],"sourcesContent":["import React from \"react\";\n\n// Define the type for the points and the setter function if using TypeScript\n// If you're not using TypeScript, you can remove these type definitions.\ntype Point = {\n  x: number;\n  y: number;\n};\n\ntype InputTableProps = {\n  points: Point[];\n  setPoints: (points: Point[]) => void;\n  show: boolean;\n};\n\n// Modify the InputTable to accept `setPoints` as a prop\nconst InputTable: React.FC<InputTableProps> = ({ points, setPoints, show }) => {\n  // Handler for input changes\n  const handlePointChange = (\n    index: number,\n    coord: \"x\" | \"y\",\n    value: string\n  ) => {\n    const updatedPoints = [...points];\n    updatedPoints[index][coord] = parseFloat(value);\n    setShow(false);\n    setPoints(updatedPoints);\n  };\n\n  return (\n    <table>\n      <thead>\n        <tr>\n          <th></th>\n          {points.map((_, index) => (\n            <th key={index}>{`Point ${index}`}</th>\n          ))}\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>X</td>\n          {points.map((point, index) => (\n            <td key={`x-${index}`}>\n              <input\n                type=\"number\"\n                value={point.x}\n                onChange={(e) => handlePointChange(index, \"x\", e.target.value)}\n              />\n            </td>\n          ))}\n        </tr>\n        <tr>\n          <td>Y</td>\n          {points.map((point, index) => (\n            <td key={`y-${index}`}>\n              <input\n                type=\"number\"\n                value={point.y}\n                onChange={(e) => handlePointChange(index, \"y\", e.target.value)}\n              />\n            </td>\n          ))}\n        </tr>\n      </tbody>\n    </table>\n  );\n};\n\nexport default InputTable;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}