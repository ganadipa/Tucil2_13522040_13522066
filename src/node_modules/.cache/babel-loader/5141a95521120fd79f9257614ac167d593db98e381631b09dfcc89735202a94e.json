{"ast":null,"code":"var _jsxFileName = \"/home/noxirongky/code/stima/tucil2/src/src/components/CanvasComponents.tsx\",\n  _s = $RefreshSig$();\n// CanvasComponent.tsx\nimport React, { useRef, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CanvasComponent = ({\n  points,\n  bezierPoints\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  let CurveWidth = 0,\n    CurveHeight = 0;\n  for (let i = 0; i < points.length; i++) {\n    CurveWidth = Math.max(points[i].x, CurveWidth);\n    CurveHeight = Math.max(points[i].CurveHeight);\n  }\n  for (let i = 0; i < bezierPoints.length; i++) {\n    CurveWidth = Math.max(bezierPoints[i].x, CurveWidth);\n    CurveHeight = Math.max(bezierPoints[i].CurveHeight);\n  }\n  CurveWidth *= 1.5;\n  CurveHeight *= 1.5;\n  const drawGrid = (context, width, height) => {\n    const gridSize = Math.min(width / 10, height / 10); // Define the size of the grid\n    context.strokeStyle = \"#cbd5e1\"; // Light grey color for the grid lines\n\n    // Draw vertical grid lines\n    for (let x = 0; x <= width; x += gridSize) {\n      context.beginPath();\n      context.moveTo(x, 0);\n      context.lineTo(x, height);\n      context.stroke();\n    }\n\n    // Draw horizontal grid lines\n    for (let y = 0; y <= height; y += gridSize) {\n      context.beginPath();\n      context.moveTo(0, y);\n      context.lineTo(width, y);\n      context.stroke();\n    }\n  };\n  const drawLine = (context, start, end, color = \"black\") => {\n    context.beginPath();\n    context.moveTo(start.x, start.y);\n    context.lineTo(end.x, end.y);\n    context.strokeStyle = color;\n    context.stroke();\n  };\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (canvas) {\n      const context = canvas.getContext(\"2d\");\n      if (context) {\n        // Clear the canvas\n        context.clearRect(0, 0, width, height);\n\n        // Draw the grid\n        drawGrid(context, width, height);\n\n        // Draw the segments\n        for (let i = 0; i < points.length - 1; i++) {\n          drawLine(context, points[i], points[i + 1], \"blue\");\n        }\n\n        // Draw the bezier curve\n        for (let i = 0; i < bezierPoints.length - 1; i++) {\n          drawLine(context, bezierPoints[i], bezierPoints[i + 1], \"red\");\n        }\n      }\n    }\n  }, [points, bezierPoints, width, height]); // Redraw when points, bezierPoints, width, or height change\n\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    width: width,\n    height: height,\n    className: \"bg-zinc-100\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n};\n_s(CanvasComponent, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = CanvasComponent;\nexport default CanvasComponent;\nvar _c;\n$RefreshReg$(_c, \"CanvasComponent\");","map":{"version":3,"names":["React","useRef","useEffect","jsxDEV","_jsxDEV","CanvasComponent","points","bezierPoints","_s","canvasRef","CurveWidth","CurveHeight","i","length","Math","max","x","drawGrid","context","width","height","gridSize","min","strokeStyle","beginPath","moveTo","lineTo","stroke","y","drawLine","start","end","color","canvas","current","getContext","clearRect","ref","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/noxirongky/code/stima/tucil2/src/src/components/CanvasComponents.tsx"],"sourcesContent":["// CanvasComponent.tsx\nimport React, { useRef, useEffect } from \"react\";\n\ntype Point = {\n  x: number;\n  y: number;\n};\n\ninterface CanvasProps {\n  points: Point[];\n  bezierPoints: Point[];\n}\n\nconst CanvasComponent: React.FC<CanvasProps> = ({ points, bezierPoints }) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  let CurveWidth = 0,\n    CurveHeight = 0;\n  for (let i = 0; i < points.length; i++) {\n    CurveWidth = Math.max(points[i].x, CurveWidth);\n    CurveHeight = Math.max(points[i].CurveHeight);\n  }\n\n  for (let i = 0; i < bezierPoints.length; i++) {\n    CurveWidth = Math.max(bezierPoints[i].x, CurveWidth);\n    CurveHeight = Math.max(bezierPoints[i].CurveHeight);\n  }\n\n  CurveWidth *= 1.5;\n  CurveHeight *= 1.5;\n\n  const drawGrid = (\n    context: CanvasRenderingContext2D,\n    width: number,\n    height: number\n  ) => {\n    const gridSize = Math.min(width / 10, height / 10); // Define the size of the grid\n    context.strokeStyle = \"#cbd5e1\"; // Light grey color for the grid lines\n\n    // Draw vertical grid lines\n    for (let x = 0; x <= width; x += gridSize) {\n      context.beginPath();\n      context.moveTo(x, 0);\n      context.lineTo(x, height);\n      context.stroke();\n    }\n\n    // Draw horizontal grid lines\n    for (let y = 0; y <= height; y += gridSize) {\n      context.beginPath();\n      context.moveTo(0, y);\n      context.lineTo(width, y);\n      context.stroke();\n    }\n  };\n\n  const drawLine = (\n    context: CanvasRenderingContext2D,\n    start: Point,\n    end: Point,\n    color: string = \"black\"\n  ) => {\n    context.beginPath();\n    context.moveTo(start.x, start.y);\n    context.lineTo(end.x, end.y);\n    context.strokeStyle = color;\n    context.stroke();\n  };\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (canvas) {\n      const context = canvas.getContext(\"2d\");\n      if (context) {\n        // Clear the canvas\n        context.clearRect(0, 0, width, height);\n\n        // Draw the grid\n        drawGrid(context, width, height);\n\n        // Draw the segments\n        for (let i = 0; i < points.length - 1; i++) {\n          drawLine(context, points[i], points[i + 1], \"blue\");\n        }\n\n        // Draw the bezier curve\n        for (let i = 0; i < bezierPoints.length - 1; i++) {\n          drawLine(context, bezierPoints[i], bezierPoints[i + 1], \"red\");\n        }\n      }\n    }\n  }, [points, bezierPoints, width, height]); // Redraw when points, bezierPoints, width, or height change\n\n  return (\n    <canvas\n      ref={canvasRef}\n      width={width}\n      height={height}\n      className=\"bg-zinc-100\"\n    />\n  );\n};\n\nexport default CanvasComponent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}