{"ast":null,"code":"var _jsxFileName = \"/home/noxirongky/code/stima/tucil2/src/src/components/CanvasComponents.tsx\",\n  _s = $RefreshSig$();\n// CanvasComponent.tsx\nimport React, { useRef, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CanvasComponent = ({\n  points,\n  bezierPoints\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  let MaxWidth = 0,\n    MaxHeight = 0;\n  for (let i = 0; i < points.length; i++) {\n    MaxWidth = Math.max(points[i].x, MaxWidth);\n    MaxHeight = Math.max(points[i].y, MaxHeight);\n  }\n  for (let i = 0; i < bezierPoints.length; i++) {\n    MaxWidth = Math.max(bezierPoints[i].x, MaxWidth);\n    MaxHeight = Math.max(bezierPoints[i].y, MaxHeight);\n  }\n  MaxWidth *= 1.5;\n  MaxHeight *= 1.5;\n  const Normalize = (num, which) => {\n    if (which === \"w\") {\n      return num / MaxWidth * 300;\n    } else {\n      return num / MaxHeight * 300;\n    }\n  };\n  const drawGrid = (context, width, height) => {\n    const gridSize = Math.min(width / 10, height / 10); // Define the size of the grid\n    context.strokeStyle = \"#cbd5e1\"; // Light grey color for the grid lines\n\n    // Draw vertical grid lines\n    for (let x = 0; x <= width; x += gridSize) {\n      context.beginPath();\n      context.moveTo(x, 0);\n      context.lineTo(x, height);\n      context.stroke();\n    }\n\n    // Draw horizontal grid lines\n    for (let y = 0; y <= height; y += gridSize) {\n      context.beginPath();\n      context.moveTo(0, y);\n      context.lineTo(width, y);\n      context.stroke();\n    }\n  };\n  const drawLine = (context, start, end, color = \"black\") => {\n    context.beginPath();\n    context.moveTo(Normalize(start.x, \"w\"), Normalize(start.y, \"h\"));\n    context.lineTo(Normalize(end.x, \"w\"), Normalize(end.y, \"h\"));\n    context.strokeStyle = color;\n    context.stroke();\n  };\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (canvas) {\n      const context = canvas.getContext(\"2d\");\n      if (context) {\n        // Clear the canvas\n        context.clearRect(0, 0, 500, 500);\n\n        // Draw the grid\n        drawGrid(context, 500, 500);\n\n        // Draw the segments\n        for (let i = 0; i < points.length - 1; i++) {\n          drawLine(context, points[i], points[i + 1], \"blue\");\n        }\n\n        // Draw the bezier curve\n        for (let i = 0; i < bezierPoints.length - 1; i++) {\n          drawLine(context, bezierPoints[i], bezierPoints[i + 1], \"red\");\n        }\n      }\n    }\n  }); // Redraw when points, bezierPoints, width, or height change\n\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    width: 500,\n    height: 500,\n    className: \"bg-zinc-100\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n};\n_s(CanvasComponent, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = CanvasComponent;\nexport default CanvasComponent;\nvar _c;\n$RefreshReg$(_c, \"CanvasComponent\");","map":{"version":3,"names":["React","useRef","useEffect","jsxDEV","_jsxDEV","CanvasComponent","points","bezierPoints","_s","canvasRef","MaxWidth","MaxHeight","i","length","Math","max","x","y","Normalize","num","which","drawGrid","context","width","height","gridSize","min","strokeStyle","beginPath","moveTo","lineTo","stroke","drawLine","start","end","color","canvas","current","getContext","clearRect","ref","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/noxirongky/code/stima/tucil2/src/src/components/CanvasComponents.tsx"],"sourcesContent":["// CanvasComponent.tsx\nimport React, { useRef, useEffect } from \"react\";\n\ntype Point = {\n  x: number;\n  y: number;\n};\n\ninterface CanvasProps {\n  points: Point[];\n  bezierPoints: Point[];\n}\n\nconst CanvasComponent: React.FC<CanvasProps> = ({ points, bezierPoints }) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  let MaxWidth = 0,\n    MaxHeight = 0;\n  for (let i = 0; i < points.length; i++) {\n    MaxWidth = Math.max(points[i].x, MaxWidth);\n    MaxHeight = Math.max(points[i].y, MaxHeight);\n  }\n\n  for (let i = 0; i < bezierPoints.length; i++) {\n    MaxWidth = Math.max(bezierPoints[i].x, MaxWidth);\n    MaxHeight = Math.max(bezierPoints[i].y, MaxHeight);\n  }\n\n  MaxWidth *= 1.5;\n  MaxHeight *= 1.5;\n\n  const Normalize = (num: number, which: \"w\" | \"h\") => {\n    if (which === \"w\") {\n      return (num / MaxWidth) * 300;\n    } else {\n      return (num / MaxHeight) * 300;\n    }\n  };\n\n  const drawGrid = (\n    context: CanvasRenderingContext2D,\n    width: number,\n    height: number\n  ) => {\n    const gridSize = Math.min(width / 10, height / 10); // Define the size of the grid\n    context.strokeStyle = \"#cbd5e1\"; // Light grey color for the grid lines\n\n    // Draw vertical grid lines\n    for (let x = 0; x <= width; x += gridSize) {\n      context.beginPath();\n      context.moveTo(x, 0);\n      context.lineTo(x, height);\n      context.stroke();\n    }\n\n    // Draw horizontal grid lines\n    for (let y = 0; y <= height; y += gridSize) {\n      context.beginPath();\n      context.moveTo(0, y);\n      context.lineTo(width, y);\n      context.stroke();\n    }\n  };\n\n  const drawLine = (\n    context: CanvasRenderingContext2D,\n    start: Point,\n    end: Point,\n    color: string = \"black\"\n  ) => {\n    context.beginPath();\n    context.moveTo(Normalize(start.x, \"w\"), Normalize(start.y, \"h\"));\n    context.lineTo(Normalize(end.x, \"w\"), Normalize(end.y, \"h\"));\n    context.strokeStyle = color;\n    context.stroke();\n  };\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (canvas) {\n      const context = canvas.getContext(\"2d\");\n      if (context) {\n        // Clear the canvas\n        context.clearRect(0, 0, 500, 500);\n\n        // Draw the grid\n        drawGrid(context, 500, 500);\n\n        // Draw the segments\n        for (let i = 0; i < points.length - 1; i++) {\n          drawLine(context, points[i], points[i + 1], \"blue\");\n        }\n\n        // Draw the bezier curve\n        for (let i = 0; i < bezierPoints.length - 1; i++) {\n          drawLine(context, bezierPoints[i], bezierPoints[i + 1], \"red\");\n        }\n      }\n    }\n  }); // Redraw when points, bezierPoints, width, or height change\n\n  return (\n    <canvas ref={canvasRef} width={500} height={500} className=\"bg-zinc-100\" />\n  );\n};\n\nexport default CanvasComponent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}